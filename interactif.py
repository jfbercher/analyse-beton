# -*- coding: utf-8 -*-
"""interactif.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1h_NWLBVI5XfkDAFr5FGeJKCbCoQA4o3h
"""

import dill
MegaModel = dill.load(open('MegaModel.dill', 'rb'))
X = dill.load(open('X.dill', 'rb'))
Y = dill.load(open('Y.dill', 'rb'))



import numpy as np
import pandas as pd
import ipywidgets as widgets
from IPython.display import display

import warnings
warnings.filterwarnings('ignore')

def computeEstimate(x):
  #x = [2306.0, 1.0, 41, np.nan, 13.3, np.nan, 6.0,  14.3, 1.11, 113.0, 20.2, 114.9, False, False, True, False, False, False, False, False, False]
  #x = np.array(x).reshape(1, -1)
  out = pd.Series(index=Y.columns)
  for w, label in enumerate(Y.columns):
    out[label] = MegaModel[w].predict(x)
  return out


# Création des sliders pour chaque composante
sliders = [
    #widgets.FloatSlider(value=0, min=-10, max=10, step=0.1, description=f"x{i}") for i in range(n)
    widgets.FloatSlider(min=2125.0, max=2450.0, step=5.0, description="('ρ frais', '(kg.m-3)')"),
    widgets.FloatSlider(min=0.8, max=6.8, step=0.1, description="('Air occlus', '(%)')"),
    widgets.FloatSlider(min=26, max=94, step=1, description="('Rc moy 28 j (Ø11x22)', '(MPa)')"),
    widgets.FloatSlider(min=9.5, max=19.5, step=0.1, description='("Porosité accessible à l eau moy (%)", "28 j")'),
    widgets.FloatSlider(min=8.5, max=20, step=0.1, description="('Porosité accessible à l eau moy (%)', '90 j')"),
    widgets.FloatSlider(min=4.4, max=8.9, step=0.1, description="('Absorption d eau moy (%)', '28 j')"),
    widgets.FloatSlider(min=4.3, max=8.6, step=0.10, description="('Absorption d eau moy (%)', '90 j')"),
    widgets.FloatSlider(min=9.2, max=21.3, step=0.1, description="('Porosité accessible à l eau caractéristique à 90 j(%)', 'Peau,k,90j (%)')"),
    widgets.FloatSlider(min=0.0, max=3.24, step=0.01, description="('Vitesse de carbonatation caractéristique', 'Vacc,k,90j (mm/jour0.5)')"),
    widgets.FloatSlider(min=33.0, max=579.0, step=5.0, description="('Résistivité caractéristique', 'ρk (Ω.m)')"),
    widgets.FloatSlider(min=0.4, max=54.4, step=0.8, description="('Coefficient de migration apparente des ions chlorures caractéristique', 'Drcm,k (10-12 m2/s)')"),
    widgets.FloatSlider(min=30.4, max=1323.1, step=2.5, description="('Perméabilité aux gaz caractéristique', 'ksec,k (10-18m2)')"),
    widgets.Dropdown(options=[1, 0], description="('Affaissement', '(mm)_étalement 610')"),
    widgets.Dropdown(options=['(-)_C25/30', '(-)_C30/37',  '(-)_C35/45', '(-)_C40/50', '(-)_C45/55', '(-)_C50/60', '(-)_C55/67', '(-)_C70/85'],  description="('Classe_Rc')")
    ]
xinit = [2306.0, 1.0, 41, 9.5, 13.3, 4.4, 6.0,  14.3, 1.11, 113.0, 20.2, 114.9, 0, '(-)_C30/37', 1, 0, 0, 0, 0, 0, 0]
for k,slider in enumerate(sliders):
  slider.value = xinit[k]
for slider in sliders:
  slider.layout = widgets.Layout(width='100%')
  slider.style.description_width = '250px'

button = widgets.Button(description="Compute")
buttonSave = widgets.Button(description="ComputeAndSave")
output = widgets.Output()

# Fonction de mise à jour
def update_estimate(_):
    with output:
        output.clear_output()  # Nettoie l'affichage précédent
        x_values = np.array([s.value for s in sliders])  # Récupère les valeurs des sliders
        x_series = pd.DataFrame(index=[0], columns=X.columns)  # Convertit en Series pandas
        x_series.iloc[0, :len(x_values)] = x_values  # Assigne les valeurs aux n premières composantes
        x_series.loc[0, ("Classe_Rc", )] = 0
        x_series.loc[0, ("Classe_Rc", x_values[-1])] = 1
        #print(x_series)
        result = computeEstimate(pd.DataFrame(x_series))  # Calcul
        display(result)
        return pd.DataFrame(x_series), result

def update_estimate_save(_):
    X, res = update_estimate(_)
    #with output:
    #    output.clear_output()  # Nettoie l'affichage précédent
    Z = pd.concat([X.transpose(), res], axis=0, keys=["Propriétés", "Constituants/dosages"])
    Z.to_excel("Output.xlsx")


for slider in sliders:
  slider.observe(update_estimate, names='value')

# Associer la fonction au bouton
button.on_click(update_estimate)
buttonSave.on_click(update_estimate_save)

# Affichage de l'interface
#display(*sliders, button, buttonSave,  output)

# Répartition en colonnes
col1 = widgets.VBox([*sliders, button, buttonSave])
col2 = widgets.VBox([output])
col1.layout = widgets.Layout(width='100%')
col2.layout = widgets.Layout(width='100%')

# Affichage en deux colonnes
display(widgets.HBox([col1, col2]))

#x = [2306.0, 1.0, 41, np.nan, 13.3, np.nan, 6.0,  14.3, 1.11, 113.0, 20.2, 114.9, False, False, True, False, False, False, False, False, False]
